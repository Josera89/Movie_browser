<!DOCTYPE html>
<html lang="en">
    <head>
        <% include ../partials/head %>
    </head>
	<body>

		<script src="/build/three.js"></script>
		<script src="/js/renderers/Projector.js"></script>
		<script src="/js/renderers/CanvasRenderer.js"></script>
		<script src="/js/libs/stats.min.js"></script>

    <header>
      <% include ../partials/header %>
    </header>

		<script>

		  var movie = <%- JSON.stringify(movie) %>;

			var container, stats;
			var camera, scene, renderer;
			var cube, plane;

			var targetRotation = 3.2;
			var targetRotationOnMouseDown = 0;

			var mouseX = 0;
			var mouseXOnMouseDown = 0;

			var windowHalfX = window.innerWidth / 2;
			var windowHalfY = window.innerHeight / 2;

			init();
			animate();

			function init() {

				container = document.createElement( 'div' );
				container.className = "canvas";
				document.body.appendChild( container );
				// container = document.getElementById("movie-canvas");

				camera = new THREE.PerspectiveCamera( 70, window.innerWidth / window.innerHeight, 1, 1000 );
				camera.position.y = 100;
				camera.position.z = 300;

				scene = new THREE.Scene();

				// Cube
				var geometry = new THREE.BoxGeometry( 150, 150, 150 );

				for ( var i = 0; i < geometry.faces.length; i += 2 ) {
					var hex = Math.random() * 0xffffff;
					geometry.faces[ i ].color.setHex( hex );
					geometry.faces[ i + 1 ].color.setHex( hex );
				}

	      var material = new THREE.MeshFaceMaterial( [
		      new THREE.MeshBasicMaterial( { map: THREE.ImageUtils.loadTexture( 'http://image.tmdb.org/t/p/w500/' + movie.backdrop_path ) } ),
		      new THREE.MeshBasicMaterial( { map: THREE.ImageUtils.loadTexture( 'http://image.tmdb.org/t/p/w500/' + movie.backdrop_path ) } ),
		      //TOP
		      new THREE.MeshBasicMaterial( { color: 0x121212, vertexColors: THREE.FaceColors } ),
		      //BOTTOM
	        new THREE.MeshBasicMaterial( { color: 0x121212, vertexColors: THREE.FaceColors } ),
	        new THREE.MeshBasicMaterial( { map: THREE.ImageUtils.loadTexture( 'http://image.tmdb.org/t/p/w500/' + movie.poster_path ) } ),
	        new THREE.MeshBasicMaterial( { map: THREE.ImageUtils.loadTexture( 'http://image.tmdb.org/t/p/w500/' + movie.poster_path ) } )
	      ]);

				cube = new THREE.Mesh( geometry, material );
				cube.position.y = 150;
				scene.add( cube );

				// Plane
				var geometry = new THREE.PlaneBufferGeometry( 200, 200 );
				geometry.rotateX( - Math.PI / 2 );

				var material = new THREE.MeshBasicMaterial( { color: 0x212121, overdraw: 0.5 } );

				plane = new THREE.Mesh( geometry, material );
				scene.add( plane );

				renderer = new THREE.CanvasRenderer();
				renderer.setClearColor( 0x424242 );
				renderer.setPixelRatio( window.devicePixelRatio );
				// renderer.setSize( $("#movie-canvas").innerWidth(), $("#movie-canvas").innerHeight() );
				renderer.setSize( window.innerWidth, window.innerHeight );
				container.appendChild( renderer.domElement );


				document.addEventListener( 'mousedown', onDocumentMouseDown, false );
				document.addEventListener( 'touchstart', onDocumentTouchStart, false );
				document.addEventListener( 'touchmove', onDocumentTouchMove, false );

				//

				window.addEventListener( 'resize', onWindowResize, false );
			}

			function onWindowResize() {
				windowHalfX = window.innerWidth / 2;
				windowHalfY = window.innerHeight / 2;
				camera.aspect = window.innerWidth / window.innerHeight;
				camera.updateProjectionMatrix();
				renderer.setSize( window.innerWidth, window.innerHeight );
			}

			//

			function onDocumentMouseDown( event ) {

				event.preventDefault();

				document.addEventListener( 'mousemove', onDocumentMouseMove, false );
				document.addEventListener( 'mouseup', onDocumentMouseUp, false );
				document.addEventListener( 'mouseout', onDocumentMouseOut, false );

				mouseXOnMouseDown = event.clientX - windowHalfX;
				targetRotationOnMouseDown = targetRotation;
			}

			function onDocumentMouseMove( event ) {
				mouseX = event.clientX - windowHalfX;
				targetRotation = targetRotationOnMouseDown + ( mouseX - mouseXOnMouseDown ) * 0.02;
			}

			function onDocumentMouseUp( event ) {
				document.removeEventListener( 'mousemove', onDocumentMouseMove, false );
				document.removeEventListener( 'mouseup', onDocumentMouseUp, false );
				document.removeEventListener( 'mouseout', onDocumentMouseOut, false );
			}

			function onDocumentMouseOut( event ) {
				document.removeEventListener( 'mousemove', onDocumentMouseMove, false );
				document.removeEventListener( 'mouseup', onDocumentMouseUp, false );
				document.removeEventListener( 'mouseout', onDocumentMouseOut, false );
			}

			function onDocumentTouchStart( event ) {
				if ( event.touches.length === 1 ) {
					event.preventDefault();
					mouseXOnMouseDown = event.touches[ 0 ].pageX - windowHalfX;
					targetRotationOnMouseDown = targetRotation;
				}
			}

			function onDocumentTouchMove( event ) {
				if ( event.touches.length === 1 ) {
					event.preventDefault();
					mouseX = event.touches[ 0 ].pageX - windowHalfX;
					targetRotation = targetRotationOnMouseDown + ( mouseX - mouseXOnMouseDown ) * 0.05;
				}
			}


			//Keypad controls
			$(document).on("click", onDocumentMouseDown)

		  document.onkeydown = checkKey;
		  function checkKey(e) {
      e = e || window.event;
	      if (e.keyCode == '37') {
	         cube.rotation.y -= 5;
	      }
	      else if (e.keyCode == '39') {
	         cube.rotation.y += 5;
		   	}
		  }

			//

			function animate() {
				requestAnimationFrame( animate );

				render();

			}

			function render() {
				plane.rotation.y = cube.rotation.y += ( targetRotation - cube.rotation.y ) * 0.05;
				renderer.render( scene, camera );
			}

		</script>

		<footer class="site-footer">
      <% include ../partials/footer %>
    </footer>

	</body>
</html>