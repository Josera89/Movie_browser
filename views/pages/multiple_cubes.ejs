<!DOCTYPE html>
<html lang="en">
  <head>
    <title>three.js canvas - geometry - cube</title>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
    <style>
      body {
        font-family: Monospace;
        background-color: #f0f0f0;
        margin: 0px;
        overflow: hidden;
      }
    </style>
  </head>
  <body>

    <script src="build/three.js"></script>

    <script src="js/renderers/Projector.js"></script>
    <script src="js/renderers/CanvasRenderer.js"></script>

    <script src="js/libs/stats.min.js"></script>

    <script>

      var container, stats;

      var camera, scene, renderer;

      var cube, plane;

      var mx = -620;

      var targetRotation = 10;
      var targetRotationOnMouseDown = 0;

      var mouseX = 0;
      var mouseXOnMouseDown = 0;

      var windowHalfX = window.innerWidth / 2;
      var windowHalfY = window.innerHeight / 2;

      init();
      animate();

      function init() {
        container = document.createElement( 'div' );
        document.body.appendChild( container );
        // var info = document.createElement( 'div' );
        // info.style.position = 'absolute';
        // info.style.top = '10px';
        // info.style.width = '100%';
        // info.style.textAlign = 'center';
        // container.appendChild( info );

        camera = new THREE.PerspectiveCamera( 70, window.innerWidth / window.innerHeight, 1, 1000 );
            camera.position.x = -700;
            camera.rotation.y = -.789;
            camera.position.y = -100;
            camera.position.z = 400;

        scene = new THREE.Scene();

        // Cube

        var geometry = new THREE.BoxGeometry( 160,160,160 );

        // for ( var i = 0; i < geometry.faces.length; i += 2 ) {
        //   var hex = Math.random() * 0xffffff;
        //   geometry.faces[ i ].color.setHex( hex );
        //   geometry.faces[ i + 1 ].color.setHex( hex );
        // }

        var material = new THREE.MeshFaceMaterial( [
          new THREE.MeshBasicMaterial( { map: THREE.ImageUtils.loadTexture( 'http://image.tmdb.org/t/p/w500//lZpWprJqbIFpEV5uoHfoK0KCnTW.jpg' ) } ),
          new THREE.MeshBasicMaterial( { map: THREE.ImageUtils.loadTexture( 'http://image.tmdb.org/t/p/w500//8Pt7hlu7fkc5IIR0VZ2kNGY8sT4.jpg' ) } ),
          new THREE.MeshBasicMaterial( { map: THREE.ImageUtils.loadTexture( 'http://image.tmdb.org/t/p/w500//lZpWprJqbIFpEV5uoHfoK0KCnTW.jpg' ) } ),
          new THREE.MeshBasicMaterial( { map: THREE.ImageUtils.loadTexture( 'starwars.jpeg' ) } ),
          new THREE.MeshBasicMaterial( { map: THREE.ImageUtils.loadTexture( 'starwars.jpeg' ) } ),
          new THREE.MeshBasicMaterial( { map: THREE.ImageUtils.loadTexture( 'http://image.tmdb.org/t/p/w500//4ctv9pxKpwjTFevWQbvaqXkXbPF.jpg' ) } )
        ]);


        for (var i = 0;i<8;i++){
            cube = new THREE.Mesh( geometry, material);
            cube.rotation.y = -.81;
            cube.position.x = mx;
            cube.position.z = mx;
            scene.add(cube);
            mx+= 140;
        }

        // Plane

        var geometry = new THREE.PlaneBufferGeometry( 200, 200 );
        // geometry.rotateX( - Math.PI / 2 );

        var material = new THREE.MeshBasicMaterial( { color: 0xe0e0e0, overdraw: 0.5 } );

        plane = new THREE.Mesh( geometry, material );
        // scene.add( plane );

        renderer = new THREE.CanvasRenderer();

        //BACKGOUND
        renderer.setClearColor( 0x424242 );
        renderer.setPixelRatio( window.devicePixelRatio );
        renderer.setSize( window.innerWidth, window.innerHeight );
        container.appendChild( renderer.domElement );

        stats = new Stats();
        container.appendChild( stats.dom );

        document.addEventListener( 'mousedown', onDocumentMouseDown, false );
        document.addEventListener( 'touchstart', onDocumentTouchStart, false );
        document.addEventListener( 'touchmove', onDocumentTouchMove, false );

        //

        window.addEventListener( 'resize', onWindowResize, false );

      }

      function onWindowResize() {

        windowHalfX = window.innerWidth / 2;
        windowHalfY = window.innerHeight / 2;

        camera.aspect = window.innerWidth / window.innerHeight;
        camera.updateProjectionMatrix();

        renderer.setSize( window.innerWidth, window.innerHeight );
      }

      //

      function onDocumentMouseDown( event ) {
        event.preventDefault();

        document.addEventListener( 'mousemove', onDocumentMouseMove, false );
        document.addEventListener( 'mouseup', onDocumentMouseUp, false );
        document.addEventListener( 'mouseout', onDocumentMouseOut, false );

        mouseXOnMouseDown = event.clientX - windowHalfX;
        targetRotationOnMouseDown = targetRotation;
      }

      function onDocumentMouseMove( event ) {
        mouseX = event.clientX - windowHalfX;
        targetRotation = targetRotationOnMouseDown + ( mouseX - mouseXOnMouseDown ) * 0.02;
      }

      function onDocumentMouseUp( event ) {
        document.removeEventListener( 'mousemove', onDocumentMouseMove, false );
        document.removeEventListener( 'mouseup', onDocumentMouseUp, false );
        document.removeEventListener( 'mouseout', onDocumentMouseOut, false );
      }

      function onDocumentMouseOut( event ) {
        document.removeEventListener( 'mousemove', onDocumentMouseMove, false );
        document.removeEventListener( 'mouseup', onDocumentMouseUp, false );
        document.removeEventListener( 'mouseout', onDocumentMouseOut, false );
      }

      function onDocumentTouchStart( event ) {
        if ( event.touches.length === 1 ) {
          event.preventDefault();
          mouseXOnMouseDown = event.touches[ 0 ].pageX - windowHalfX;
          targetRotationOnMouseDown = targetRotation;
        }
      }

      function onDocumentTouchMove( event ) {
        if ( event.touches.length === 1 ) {
          event.preventDefault();
          mouseX = event.touches[ 0 ].pageX - windowHalfX;
          targetRotation = targetRotationOnMouseDown + ( mouseX - mouseXOnMouseDown ) * 0.05;
        }
      }

      function animate() {
        requestAnimationFrame( animate );
        stats.begin();
        render();
        stats.end();
      }

      function render() {
        plane.rotation.y = cube.rotation.y += ( targetRotation - cube.rotation.y ) * 0.05;
        renderer.render( scene, camera );
      }

    </script>

  </body>
</html>
